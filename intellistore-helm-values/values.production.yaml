# Production values for IntelliStore
# This file contains production-ready configuration

global:
  imageRegistry: "ghcr.io/intellistore"
  imagePullSecrets:
    - name: ghcr-secret
  storageClass: "gp3-ssd"

# API Service - Production Configuration
api:
  enabled: true
  image:
    repository: intellistore-api
    tag: "v1.0.0"
    pullPolicy: IfNotPresent
  replicas: 5
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "2"
      memory: "4Gi"
  env:
    VAULT_ADDR: "https://vault.intellistore.svc.cluster.local:8200"
    JWT_SECRET_PATH: "vault://intellistore/keys/jwt-signing-key"
    KAFKA_BROKERS: "kafka-0.kafka.svc.cluster.local:9092,kafka-1.kafka.svc.cluster.local:9092,kafka-2.kafka.svc.cluster.local:9092"
    RAFT_LEADER_ADDR: "raft-metadata-0.raft-metadata.svc.cluster.local:5000"
    LOG_LEVEL: "INFO"
    ENVIRONMENT: "production"
  service:
    type: ClusterIP
    port: 8000
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/rate-limit: "100"
    hosts:
      - host: api.intellistore.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: api-intellistore-tls
        hosts:
          - api.intellistore.com
  autoscaling:
    enabled: true
    minReplicas: 5
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  podDisruptionBudget:
    enabled: true
    minAvailable: 3

# Core Services - Production Configuration
core:
  enabled: true
  raft:
    image:
      repository: intellistore-core
      tag: "v1.0.0"
      pullPolicy: IfNotPresent
    replicas: 5  # Odd number for Raft consensus
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "1"
        memory: "2Gi"
    persistence:
      enabled: true
      size: "100Gi"
      storageClass: "gp3-ssd"
    service:
      type: ClusterIP
      port: 5000
    podDisruptionBudget:
      enabled: true
      minAvailable: 3
  
  storageNode:
    image:
      repository: intellistore-core
      tag: "v1.0.0"
      pullPolicy: IfNotPresent
    replicas: 12  # 6 SSD + 6 HDD
    resources:
      requests:
        cpu: "1"
        memory: "2Gi"
      limits:
        cpu: "4"
        memory: "8Gi"
    persistence:
      enabled: true
      size: "1Ti"
      storageClass: "gp3-ssd"
    service:
      type: ClusterIP
      port: 8080
    tiers:
      ssd:
        replicas: 6
        storageClass: "gp3-ssd"
        resources:
          requests:
            cpu: "2"
            memory: "4Gi"
          limits:
            cpu: "4"
            memory: "8Gi"
        persistence:
          size: "2Ti"
      hdd:
        replicas: 6
        storageClass: "gp2-hdd"
        resources:
          requests:
            cpu: "1"
            memory: "2Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
        persistence:
          size: "5Ti"

# ML Inference Service - Production Configuration
ml:
  enabled: true
  image:
    repository: intellistore-ml-inference
    tag: "v1.0.0"
    pullPolicy: IfNotPresent
  replicas: 5
  resources:
    requests:
      cpu: "1"
      memory: "2Gi"
    limits:
      cpu: "4"
      memory: "8Gi"
  env:
    KAFKA_BROKERS: "kafka-0.kafka.svc.cluster.local:9092,kafka-1.kafka.svc.cluster.local:9092,kafka-2.kafka.svc.cluster.local:9092"
    KAFKA_TOPIC: "access-logs"
    MODEL_PATH: "/app/model.onnx"
    THRESHOLD: "0.85"  # Higher threshold for production
    ENVIRONMENT: "production"
  service:
    type: ClusterIP
    port: 8001
  autoscaling:
    enabled: true
    minReplicas: 5
    maxReplicas: 15
    targetCPUUtilizationPercentage: 70

# Tier Controller - Production Configuration
tierController:
  enabled: true
  image:
    repository: intellistore-tier-controller
    tag: "v1.0.0"
    pullPolicy: IfNotPresent
  replicas: 3  # Multiple replicas for HA
  resources:
    requests:
      cpu: "200m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"
  env:
    KAFKA_BROKERS: "kafka-0.kafka.svc.cluster.local:9092,kafka-1.kafka.svc.cluster.local:9092,kafka-2.kafka.svc.cluster.local:9092"
    API_ENDPOINT: "http://intellistore-api.intellistore.svc.cluster.local:8000"
    ENVIRONMENT: "production"
    LOG_LEVEL: "INFO"

# HashiCorp Vault - Production Configuration
vault:
  enabled: true
  image:
    repository: vault
    tag: "1.15.2"
    pullPolicy: IfNotPresent
  replicas: 3  # HA mode
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "1"
      memory: "2Gi"
  persistence:
    enabled: true
    size: "100Gi"
    storageClass: "gp3-ssd"
  config:
    storage:
      raft:
        path: "/vault/data"
        node_id: "vault-0"
    listener:
      tcp:
        address: "0.0.0.0:8200"
        tls_cert_file: "/vault/tls/tls.crt"
        tls_key_file: "/vault/tls/tls.key"
    ui: true
    api_addr: "https://vault.intellistore.svc.cluster.local:8200"
    cluster_addr: "https://vault.intellistore.svc.cluster.local:8201"
    seal:
      awskms:
        region: "us-west-2"
        kms_key_id: "alias/vault-unseal-key"
  service:
    type: ClusterIP
    port: 8200
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: vault.intellistore.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: vault-intellistore-tls
        hosts:
          - vault.intellistore.com

# Monitoring Stack - Production Configuration
monitoring:
  enabled: true
  prometheus:
    enabled: true
    retention: "30d"
    storageSize: "500Gi"
    resources:
      requests:
        cpu: "1"
        memory: "4Gi"
      limits:
        cpu: "4"
        memory: "16Gi"
    persistence:
      storageClass: "gp3-ssd"
    alerting:
      enabled: true
      rules:
        - name: intellistore-alerts
          rules:
            - alert: IntelliStoreAPIDown
              expr: up{job="intellistore-api"} == 0
              for: 5m
              labels:
                severity: critical
              annotations:
                summary: "IntelliStore API is down"
            - alert: RaftLeaderElection
              expr: increase(raft_leader_changes_total[1h]) > 3
              for: 5m
              labels:
                severity: warning
              annotations:
                summary: "Frequent Raft leader changes detected"
            - alert: StorageNodeDown
              expr: up{job="intellistore-storage"} == 0
              for: 2m
              labels:
                severity: warning
              annotations:
                summary: "Storage node is down"
  grafana:
    enabled: true
    adminPassword: "secure-admin-password-change-me"
    persistence:
      enabled: true
      size: "50Gi"
      storageClass: "gp3-ssd"
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "1"
        memory: "2Gi"
    ingress:
      enabled: true
      className: "nginx"
      annotations:
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        cert-manager.io/cluster-issuer: "letsencrypt-prod"
      hosts:
        - host: grafana.intellistore.com
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: grafana-intellistore-tls
          hosts:
            - grafana.intellistore.com

# Frontend - Production Configuration
frontend:
  enabled: true
  image:
    repository: intellistore-frontend
    tag: "v1.0.0"
    pullPolicy: IfNotPresent
  replicas: 5
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"
  service:
    type: ClusterIP
    port: 3000
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/gzip-types: "text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript"
    hosts:
      - host: intellistore.com
        paths:
          - path: /
            pathType: Prefix
      - host: www.intellistore.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: intellistore-frontend-tls
        hosts:
          - intellistore.com
          - www.intellistore.com
  autoscaling:
    enabled: true
    minReplicas: 5
    maxReplicas: 15
    targetCPUUtilizationPercentage: 70

# External Dependencies - Production Configuration
kafka:
  enabled: true
  replicas: 5
  persistence:
    enabled: true
    size: "500Gi"
    storageClass: "gp3-ssd"
  resources:
    requests:
      cpu: "1"
      memory: "4Gi"
    limits:
      cpu: "4"
      memory: "16Gi"
  zookeeper:
    enabled: true
    replicas: 5
    persistence:
      enabled: true
      size: "100Gi"
      storageClass: "gp3-ssd"
    resources:
      requests:
        cpu: "500m"
        memory: "2Gi"
      limits:
        cpu: "2"
        memory: "8Gi"

# Security Configuration
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: intellistore
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    - to:
        - namespaceSelector:
            matchLabels:
              name: intellistore

podSecurityPolicy:
  enabled: true
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000
  capabilities:
    drop:
      - ALL

# Service Monitor for Prometheus
serviceMonitor:
  enabled: true
  interval: 15s
  scrapeTimeout: 10s
  labels:
    release: prometheus

# Backup Configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: "30d"
  storage:
    type: "s3"
    bucket: "intellistore-backups-prod"
    region: "us-west-2"

# Disaster Recovery
disasterRecovery:
  enabled: true
  crossRegionReplication:
    enabled: true
    regions:
      - "us-east-1"
      - "eu-west-1"
  rto: "4h"  # Recovery Time Objective
  rpo: "1h"  # Recovery Point Objective