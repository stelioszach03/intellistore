services:
  # HashiCorp Vault
  vault:
    image: vault:1.13.2
    container_name: intellistore-vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "dev-root-token"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    cap_add:
      - IPC_LOCK
    volumes:
      - vault-data:/vault/data
      - ./intellistore-vault-config/policies:/vault/policies
    command: vault server -dev -dev-root-token-id=dev-root-token
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka & Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: intellistore-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: intellistore-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka-data:/var/lib/kafka/data

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: intellistore-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana
  grafana:
    image: grafana/grafana:10.0.0
    container_name: intellistore-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  # Raft Metadata Nodes
  raft-metadata-0:
    build:
      context: ./intellistore-core
      dockerfile: Dockerfile
    container_name: intellistore-raft-0
    ports:
      - "5000:5000"
      - "9100:9100"
    environment:
      - MODE=raft
      - NODE_ID=raft-0
      - RAFT_ADDR=0.0.0.0:5000
      - DATA_DIR=/var/lib/intellistore
      - BOOTSTRAP=true
    volumes:
      - raft-0-data:/var/lib/intellistore
    command: ["./intellistore-server", "-mode=raft", "-id=raft-0", "-raft-addr=0.0.0.0:5000", "-data-dir=/var/lib/intellistore"]

  raft-metadata-1:
    build:
      context: ./intellistore-core
      dockerfile: Dockerfile
    container_name: intellistore-raft-1
    ports:
      - "5001:5000"
      - "9101:9100"
    environment:
      - MODE=raft
      - NODE_ID=raft-1
      - RAFT_ADDR=0.0.0.0:5000
      - DATA_DIR=/var/lib/intellistore
      - JOIN_ADDR=raft-metadata-0:5000
    volumes:
      - raft-1-data:/var/lib/intellistore
    depends_on:
      - raft-metadata-0
    command: ["./intellistore-server", "-mode=raft", "-id=raft-1", "-raft-addr=0.0.0.0:5000", "-data-dir=/var/lib/intellistore", "-join=raft-metadata-0:5000"]

  raft-metadata-2:
    build:
      context: ./intellistore-core
      dockerfile: Dockerfile
    container_name: intellistore-raft-2
    ports:
      - "5002:5000"
      - "9102:9100"
    environment:
      - MODE=raft
      - NODE_ID=raft-2
      - RAFT_ADDR=0.0.0.0:5000
      - DATA_DIR=/var/lib/intellistore
      - JOIN_ADDR=raft-metadata-0:5000
    volumes:
      - raft-2-data:/var/lib/intellistore
    depends_on:
      - raft-metadata-0
    command: ["./intellistore-server", "-mode=raft", "-id=raft-2", "-raft-addr=0.0.0.0:5000", "-data-dir=/var/lib/intellistore", "-join=raft-metadata-0:5000"]

  # Storage Nodes
  storage-node-0:
    build:
      context: ./intellistore-core
      dockerfile: Dockerfile
    container_name: intellistore-storage-0
    ports:
      - "8080:8080"
      - "9110:9100"
    environment:
      - MODE=storage
      - NODE_ID=storage-0
      - DATA_DIR=/var/lib/intellistore
      - TIER=ssd
    volumes:
      - storage-0-data:/var/lib/intellistore
    command: ["./intellistore-server", "-mode=storage", "-id=storage-0", "-data-dir=/var/lib/intellistore"]

  storage-node-1:
    build:
      context: ./intellistore-core
      dockerfile: Dockerfile
    container_name: intellistore-storage-1
    ports:
      - "8081:8080"
      - "9111:9100"
    environment:
      - MODE=storage
      - NODE_ID=storage-1
      - DATA_DIR=/var/lib/intellistore
      - TIER=ssd
    volumes:
      - storage-1-data:/var/lib/intellistore
    command: ["./intellistore-server", "-mode=storage", "-id=storage-1", "-data-dir=/var/lib/intellistore"]

  storage-node-2:
    build:
      context: ./intellistore-core
      dockerfile: Dockerfile
    container_name: intellistore-storage-2
    ports:
      - "8082:8080"
      - "9112:9100"
    environment:
      - MODE=storage
      - NODE_ID=storage-2
      - DATA_DIR=/var/lib/intellistore
      - TIER=hdd
    volumes:
      - storage-2-data:/var/lib/intellistore
    command: ["./intellistore-server", "-mode=storage", "-id=storage-2", "-data-dir=/var/lib/intellistore"]

  # API Service
  api:
    build:
      context: ./intellistore-api
      dockerfile: Dockerfile
    container_name: intellistore-api
    ports:
      - "8000:8000"
      - "9120:9090"
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=dev-root-token
      - KAFKA_BROKERS=kafka:9092
      - RAFT_LEADER_ADDR=raft-metadata-0:5000
      - STORAGE_NODES=storage-node-0:8080,storage-node-1:8081,storage-node-2:8082
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - vault
      - kafka
      - raft-metadata-0
      - storage-node-0
      - storage-node-1
      - storage-node-2
    volumes:
      - ./intellistore-api:/app
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # ML Inference Service
  ml-inference:
    build:
      context: ./intellistore-ml
      dockerfile: Dockerfile.inference
    container_name: intellistore-ml
    ports:
      - "8001:8000"
      - "9121:9090"
    environment:
      - KAFKA_BROKERS=kafka:9092
      - MODEL_PATH=/app/models/model.onnx
    depends_on:
      - kafka
    volumes:
      - ./intellistore-ml:/app

  # Tier Controller
  tier-controller:
    build:
      context: ./intellistore-tier-controller
      dockerfile: Dockerfile
    container_name: intellistore-tier-controller
    ports:
      - "9122:9090"
    environment:
      - KAFKA_BROKERS=kafka:9092
      - API_BASE_URL=http://api:8000
    depends_on:
      - kafka
      - api

  # Frontend
  frontend:
    build:
      context: ./intellistore-frontend
      dockerfile: Dockerfile.dev
    container_name: intellistore-frontend
    ports:
      - "53641:53641"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    volumes:
      - ./intellistore-frontend:/app
      - /app/node_modules
    command: ["npm", "run", "dev"]

volumes:
  vault-data:
  zookeeper-data:
  kafka-data:
  prometheus-data:
  grafana-data:
  raft-0-data:
  raft-1-data:
  raft-2-data:
  storage-0-data:
  storage-1-data:
  storage-2-data:

networks:
  default:
    name: intellistore-dev